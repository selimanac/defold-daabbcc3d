local boxes          = {}
local box_group      = -1
local ray_start      = vmath.vector3(0, 0, 0)
local ray_end        = vmath.vector3(365, 370, 0)
local query_result   = {}
local result_count   = 0
local collision_bits = {
    PLAYER = 1,          -- (2^0)
    ENEMY  = 2,          -- (2^1)
    ITEM   = 4,          -- (2^2)
    ALL    = bit.bnot(0) -- -1 for all results
}
local mask_bits      = bit.bor(collision_bits.ENEMY, collision_bits.ITEM)

local function add_box(box_position, box_type, isStatic, category)
    local box_id = factory.create("/factory#box", box_position)

    --  local sprite_size = go.get(sprite_url, "size")

    -- Insert AABB into the group.
    local box_aabb_id = -1

    if isStatic then
        box_aabb_id = daabbcc3d.insert_aabb(box_group, box_position, 10, 10, 10, category)
    else
        box_aabb_id = daabbcc3d.insert_gameobject(box_group, box_id, 10, 10, 10, category)
    end



    local t = { position = box_position, id = box_id, aabb_id = box_aabb_id }
    table.insert(boxes, t)
end
local box_aabb_id1
local box_aabb_id2
local box_aabb_id3

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_camera_projection")

    if profiler then
        profiler.enable_ui(true)
        profiler.set_ui_view_mode(profiler.VIEW_MODE_MINIMIZED)
    end

    -- New group for AABBs.
    box_group = daabbcc3d.new_group()

    local box_id = factory.create("/factory#box", vmath.vector3(0, 0, 0), nil, nil, vmath.vector3(10, 10, 10))
    table.insert(boxes, box_id)
    local box_id2 = factory.create("/factory#box", vmath.vector3(0, 0, 0), nil, nil, vmath.vector3(10, 10, 10))

    local box_id3 = factory.create("/factory#box", vmath.vector3(0, 0, 0), nil, nil, vmath.vector3(10, 10, 10))
    table.insert(boxes, box_id2)


    box_aabb_id1 = daabbcc3d.insert_gameobject(box_group, box_id, 10, 10, 10)
    box_aabb_id2 = daabbcc3d.insert_gameobject(box_group, box_id2, 10, 10, 10)
    box_aabb_id3 = daabbcc3d.insert_gameobject(box_group, box_id3, 10, 10, 10)


    go.animate(box_id, "position.y", go.PLAYBACK_LOOP_PINGPONG, -20, go.EASING_LINEAR, 3)
    --   box_aabb_id1 = daabbcc3d.insert_aabb(box_group, vmath.vector3(0, 0, 0), 10, 10, 10)
    --  box_aabb_id2 = daabbcc3d.insert_aabb(box_group, vmath.vector3(0, 0, 2), 10, 10, 10)
    --  box_aabb_id3 = daabbcc3d.insert_aabb(box_group, vmath.vector3(0, 0, 15), 10, 10, 10)
end

function update(self, dt)
    local pos = go.get_position(boxes[2])

    -- daabbcc3d.update_aabb(box_group, box_aabb_id2, pos, 10, 10, 10)


    query_result, result_count = daabbcc3d.query_id(box_group, box_aabb_id2)
    -- query_result, result_count = daabbcc3d.query_aabb(box_group, pos, 10, 10, 10)
    if query_result then
        print("query_id")
        print(result_count)
        pprint(query_result)
    end



    ray_start = vmath.vector3(0, 0, 0)
    ray_end   = vmath.vector3(10, -20, 70)
    msg.post("@render:", "draw_line", { start_point = ray_start, end_point = ray_end, color = vmath.vector4(1, 1, 1, 1) })
    local ray_query_result, ray_result_count = daabbcc3d.raycast(box_group, ray_start, ray_end)
    if ray_query_result then
        print("raycast2")
        print(ray_result_count)
        pprint(ray_query_result)
    end
end

function on_input(self, action_id, action)
    local pos = go.get_position(boxes[2])

    go.set_position(vmath.vector3(pos.x, pos.y, action.x), boxes[2])
end
