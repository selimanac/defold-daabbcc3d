local manager            = require("example.scripts.lib.manager")
local data               = require("example.scripts.lib.data")
local collision          = require("example.scripts.lib.collision")

local aabb_box           = {}
local query_result       = {}
local query_result_count = 0
local collection_title   = "QUERY AABB"

function init(self)
	manager.init(collection_title)

	data.add_box(vmath.vector3(-5, -5, 0), data.BOX_TYPE.PLAYER, true)
	data.add_box(vmath.vector3(-5, 10, 0), data.BOX_TYPE.ENEMY, true)
	data.add_box(vmath.vector3(2, 2, 0), data.BOX_TYPE.ENEMY, true)
	data.add_box(vmath.vector3(-10, 5, 0), data.BOX_TYPE.GROUND, false, true)

	-- For static update -> boxes[5]
	data.add_box(vmath.vector3(0, 0, 0), data.BOX_TYPE.GROUND, true, true)

	-- Box for dummy visualization
	aabb_box = data.add_aabb()
end

function update(self, dt)
	go.set_position(manager.world_position, aabb_box.id)
	-- Static update
	data.boxes[5].position = go.get_position(data.boxes[5].id)
	collision.update_aabb(data.boxes[5])

	if manager.is_sort then
		query_result, query_result_count = collision.query_aabb_sort(manager.world_position, 2, 2, 2, manager.is_mask, manager.is_manifold)
	else
		query_result, query_result_count = collision.query_aabb(manager.world_position, 2, 2, 2, manager.is_mask, manager.is_manifold)
	end

	if query_result then
		pprint(query_result)
		data.highlight(query_result, query_result_count)
	else
		data.clear_highlights()
	end
end

function on_input(self, action_id, action)
	manager.input(action_id, action)
end

function final(self)
	manager.final()
	data.reset()
end
